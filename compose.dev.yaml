name: satz-compose-dev

services:
  # Development service for Traefik (check /etc/hosts)
  traefik:
    image: traefik:v3.1
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--api.insecure=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080" # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - satz-network

  # Development service for frontend (optional, can still use npm run dev locally)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    environment:
      - VITE_API_URL=http://backend:3000
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - satz-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`satz.localhost`) || Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"

  # Development service for backend (optional, can still use deno run locally)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/app
    command: deno run --watch --allow-read --allow-env --allow-net main.ts
    env_file:
      - .env.local
    ports:
      - "3000:3000"
    depends_on:
      - db
    networks:
      - satz-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"

  db:
    image: postgres:17.1-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - satz-network

  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?schema=umami
      DATABASE_TYPE: postgresql
      APP_SECRET: ${UMAMI_APP_SECRET}
    depends_on:
      db:
        condition: service_healthy
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:3000/api/heartbeat" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - satz-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.umami.rule=Host(`analytics.${DOMAIN}`)"
      - "traefik.http.routers.umami.entrypoints=web"
      - "traefik.http.services.umami.loadbalancer.server.port=3000"

networks:
  satz-network:
    driver: bridge

volumes:
  postgres_data:
  letsencrypt:
